---
uti: com.xamarin.workbook
platforms:
- MacMobile
packages:
- id: Newtonsoft.Json
  version: 9.0.1
- id: Microsoft.Net.Http
  version: 2.2.29
- id: Microsoft.Bcl
  version: 1.1.10
---

```csharp
#r "Newtonsoft.Json"
```

```csharp
#r "System.Net.Http.Primitives"
#r "System.Net.Http.Extensions"
```

```csharp
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using static Newtonsoft.Json.JsonConvert;

public class Coord
    {
        [JsonProperty("lon")]
        public double Longitude { get; set; } = 0;

        [JsonProperty("lat")]
        public double Latitude { get; set; } = 0;
    }

    public class Sys
    {

        [JsonProperty("country")]
        public string Country { get; set; } = string.Empty;
    }

    public class Weather
    {
        [JsonProperty("id")]
        public int Id { get; set; } = 0;

        [JsonProperty("main")]
        public string Main { get; set; } = string.Empty;

        [JsonProperty("description")]
        public string Description { get; set; } = string.Empty;

        [JsonProperty("icon")]
        public string Icon { get; set; } = string.Empty;
    }

    public class Main
    {
        [JsonProperty("temp")]
        public double Temperature { get; set; } = 0;

        [JsonProperty("pressure")]
        public double Pressure { get; set; } = 0;

        [JsonProperty("humidity")]
        public double Humidity { get; set; } = 0;

        [JsonProperty("temp_min")]
        public double MinTemperature { get; set; } = 0;

        [JsonProperty("temp_max")]
        public double MaxTemperature { get; set; } = 0;
    }

    public class Wind
    {
        [JsonProperty("speed")]
        public double Speed { get; set; } = 0;

        [JsonProperty("deg")]
        public double WindDirectionDegrees { get; set; } = 0;
    }

    public class Clouds
    {

        [JsonProperty("all")]
        public int CloudinessPercent { get; set; } = 0;
    }

    public class WeatherRoot
    {
        [JsonProperty("coord")]
        public Coord Coordinates { get; set; } = new Coord();

        [JsonProperty("sys")]
        public Sys System { get; set; } = new Sys();

        [JsonProperty("weather")]
        public List<Weather> Weather { get; set; } = new List<Weather>();

        [JsonProperty("main")]
        public Main MainWeather { get; set; } = new Main();

        [JsonProperty("wind")]
        public Wind Wind { get; set; } = new Wind();

        [JsonProperty("clouds")]
        public Clouds Clouds { get; set; } = new Clouds();

        [JsonProperty("id")]
        public int CityId { get; set; } = 0;

        [JsonProperty("name")]
        public string Name { get; set; } = string.Empty;

        [JsonProperty("dt_txt")]
        public string Date { get; set; } = string.Empty;

        [JsonIgnore]
        public string DisplayDate => DateTime.Parse(Date).ToLocalTime().ToString("g");

        [JsonIgnore]
        public string DisplayTime => DateTime.Parse(Date).ToLocalTime().ToString("t");


        [JsonIgnore]
        public string DisplayTemp
        {
            get
            {
                var temp = (int)(MainWeather?.Temperature ?? 0);
 
                return $"{Weather?[0]?.Main ?? string.Empty} {temp}Â°";
            }
        }

        [JsonIgnore]
        public string DisplayIcon => $"http://openweathermap.org/img/w/{Weather?[0]?.Icon}.png";
    }

    public class WeatherForecastRoot
    {
        [JsonProperty("city")]
        public City City { get; set; }
        [JsonProperty("cod")]
        public string Vod { get; set; }
        [JsonProperty("message")]
        public double Message { get; set; }
        [JsonProperty("cnt")]
        public int Cnt { get; set; }
        [JsonProperty("list")]
        public List<WeatherRoot> Items { get; set; }
    }

    public class City
    {
        [JsonProperty("id")]
        public int Id { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("coord")]
        public Coord Coord { get; set; }
        [JsonProperty("country")]
        public string Country { get; set; }
        [JsonProperty("population")]
        public int Population { get; set; }
        [JsonProperty("sys")]
        public Sys Sys { get; set; }
    }

public enum Units {
        Imperial,
        Metric
}

const string WeatherCoordinatesUri = "http://api.openweathermap.org/data/2.5/weather?lat={0}&lon={1}&units={2}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";
        const string WeatherCityUri = "http://api.openweathermap.org/data/2.5/weather?q={0}&units={1}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";
        //const string ForecaseUri = "http://api.openweathermap.org/data/2.5/forecast?id={0}&units={1}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";

		const string ForcastCoordinatesUri = "http://api.openweathermap.org/data/2.5/forecast?lat={0}&lon={1}&units={2}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";
		const string ForcastCityUri = "http://api.openweathermap.org/data/2.5/forecast?q={0}&units={1}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";
		//const string ForcastUri = "http://api.openweathermap.org/data/2.5/forecast?id={0}&units={1}&appid=222ffafafd38f0d921bf5ccb7f89b3b9";

        public async Task<WeatherRoot> GetWeather(double latitude, double longitude, Units units = Units.Imperial)
        {
            using (var client = new HttpClient())
            {
				var url = string.Format(WeatherCoordinatesUri, latitude, longitude, units.ToString().ToLower());
                var json = await client.GetStringAsync(url);

                if (string.IsNullOrWhiteSpace(json))
                    return null;

                return DeserializeObject<WeatherRoot>(json);
            }
        }

        public async Task<WeatherRoot> GetWeather(string city, Units units = Units.Imperial)
        {
            using (var client = new HttpClient())
            {
                var url = string.Format(WeatherCityUri , city, units.ToString().ToLower());
                var json = await client.GetStringAsync(url);

                if (string.IsNullOrWhiteSpace(json))
                    return null;

                return DeserializeObject<WeatherRoot>(json);
            }
        }

        public async Task<WeatherForecastRoot> GetForecast(double latitude, double longitude, Units units = Units.Imperial)
        {
            using (var client = new HttpClient())
            {
                var url = string.Format(ForcastCoordinatesUri, latitude, longitude, units.ToString().ToLower());
                var json = await client.GetStringAsync(url);
                if (string.IsNullOrWhiteSpace(json))
                    return null;
                return DeserializeObject<WeatherForecastRoot>(json);
            }
        }

		public async Task<WeatherForecastRoot> GetForecast(string city, Units units = Units.Imperial) {
			using (var client = new HttpClient()) {
				var url = string.Format(ForcastCityUri, city, units.ToString().ToLower());
				var json = await client.GetStringAsync(url);
				if (string.IsNullOrWhiteSpace(json))
					return null;
				return DeserializeObject<WeatherForecastRoot>(json);
			}
		}
```

```csharp
var w = await GetWeather("Kakamas, South Africa", Units.Metric);
```

